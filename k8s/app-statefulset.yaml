apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: aws-resource-watcher
  namespace: myapp
  labels:
    app: aws-resource-watcher
spec:
  serviceName: "aws-resource-watcher"
  replicas: 1
  selector:
    matchLabels:
      app: aws-resource-watcher
  template:
    metadata:
      labels:
        app: aws-resource-watcher
    spec:
      # For EKS with IAM service account
      serviceAccountName: aws-resource-watcher
      
      containers:
      - name: aws-resource-watcher
        image: ghcr.io/mdminhazulhaque/aws-resource-watcher:latest
        imagePullPolicy: Always
        
        envFrom:
        - configMapRef:
            name: aws-resource-watcher-config
        - secretRef:
            name: aws-resource-watcher-secret
            optional: true
        
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        
        # Health checks
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "pgrep -f aws-resource-watcher"
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "pgrep -f aws-resource-watcher"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        # Security context
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        # Graceful shutdown
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - "sleep 10"
      
      # Pod security context
      securityContext:
        fsGroup: 65534
      
      # Restart policy
      restartPolicy: Always
      
      # Node selection (optional)
      # nodeSelector:
      #   kubernetes.io/arch: amd64
      
      # Tolerations (optional)
      # tolerations:
      # - key: "node-role.kubernetes.io/spot"
      #   operator: "Equal"
      #   value: "true"
      #   effect: "NoSchedule"
